diff --git a/node_modules/react-native-actions-sheet/src/index.js b/node_modules/react-native-actions-sheet/src/index.js
index dfa8fad..25f4d3f 100644
--- a/node_modules/react-native-actions-sheet/src/index.js
+++ b/node_modules/react-native-actions-sheet/src/index.js
@@ -72,7 +72,7 @@ export default class ActionSheet extends Component {
    */
 
   snapToOffset = (offset) => {
-    let correction = this.state.deviceHeight * 0.1;
+    let correction = this.state.deviceHeight * 0.15;
     let scrollOffset = this.props.gestureEnabled
       ? offset + correction + this.props.extraScroll
       : offset + correction + this.props.extraScroll;
@@ -188,23 +188,23 @@ export default class ActionSheet extends Component {
             resolve(height === 0 ? 20 : height);
           }
         );
-      }, 50);
+      }, 100);
     });
   };
 
   _showModal = async (event) => {
-    let { gestureEnabled, delayActionSheetDraw, delayActionSheetDrawTime } =
-      this.props;
-    if (!event?.nativeEvent) return;
+    let { gestureEnabled, delayActionSheetDraw, delayActionSheetDrawTime } = this.props;
 
+    if (!event?.nativeEvent) return;
     let height = event.nativeEvent.layout.height;
-
     if (this.layoutHasCalled) {
       this._returnToPrevScrollPosition(height);
       this.actionSheetHeight = height;
       return;
     } else {
-      this.actionSheetHeight = height;
+
+      this.layoutHasCalled = true;
+      this.actionSheetHeight = height
       let scrollOffset = this.getInitialScrollPosition();
       this.isRecoiling = false;
       if (Platform.OS === "ios") {
@@ -227,12 +227,11 @@ export default class ActionSheet extends Component {
       this.underlayScale.setValue(1);
       this.underlayTranslateY.setValue(100);
       if (!gestureEnabled) {
-        //DeviceEventEmitter.emit("hasReachedTop");
         this.props.onPositionChanged && this.props.onPositionChanged(true);
       }
-      this.layoutHasCalled = true;
       this.updateActionSheetPosition(scrollOffset);
     }
+   
   };
 
   _openAnimation = (scrollOffset) => {
@@ -241,7 +240,7 @@ export default class ActionSheet extends Component {
     if (animated) {
       this.transformValue.setValue(scrollOffset);
       Animated.parallel([
-        Animated.spring(this.transformValue, {
+        Animated.timing(this.transformValue, {
           toValue: 0,
           bounciness: bounceOnOpen ? bounciness : 1,
           speed: openAnimationSpeed,
@@ -277,7 +276,7 @@ export default class ActionSheet extends Component {
     let { springOffset, extraScroll } = this.props;
     let verticalOffset = event.nativeEvent.contentOffset.y;
 
-    let correction = this.state.deviceHeight * 0.1;
+    let correction = this.state.deviceHeight * 0.15;
     if (this.isRecoiling) return;
 
     if (this.prevScroll < verticalOffset) {
@@ -321,8 +320,8 @@ export default class ActionSheet extends Component {
   };
 
   updateActionSheetPosition(scrollPosition) {
-    if (!this.props.drawUnderStatusBar) return;
-    if (scrollPosition > this.state.deviceHeight) {
+    if (scrollPosition >= this.state.deviceHeight - 1) {
+      if (!this.props.drawUnderStatusBar) return;
       this.indicatorTranslateY.setValue(0);
     } else {
       this.indicatorTranslateY.setValue(-this.state.paddingTop);
@@ -330,11 +329,12 @@ export default class ActionSheet extends Component {
   }
 
   _returnToPrevScrollPosition(height) {
-    let correction = this.state.deviceHeight * 0.1;
+    let correction = this.state.deviceHeight * 0.15;
     let scrollOffset =
       height * this.currentOffsetFromBottom +
       correction +
       this.props.extraScroll;
+
     this.updateActionSheetPosition(scrollOffset);
     this._scrollTo(scrollOffset);
   }
@@ -380,9 +380,10 @@ export default class ActionSheet extends Component {
     this.targetId = event.nativeEvent.target;
     this.offsetY = event.nativeEvent.contentOffset.y;
 
-    let correction = this.state.deviceHeight * 0.1;
+    let correction = this.state.deviceHeight * 0.15;
     let distanceFromTop = this.actionSheetHeight + correction - this.offsetY;
     
+   
     if (distanceFromTop < 3) {
       if (this.isReachedTop) {
         this.isReachedTop = true;
@@ -394,18 +395,10 @@ export default class ActionSheet extends Component {
         this.props.onPositionChanged && this.props.onPositionChanged(false);
       }
     }
-    if (this.actionSheetHeight >= this.state.deviceHeight) {
-      if (!this.props.drawUnderStatusBar) return;
-      /*    if (
-        distanceFromTop < StatusBar.currentHeight &&
-        Platform.OS === "android" &&
-        this.props.statusBarTranslucent
-      ) {
-        this.indicatorTranslateY.setValue(
-          StatusBar.currentHeight - distanceFromTop
-        );
-      } */
+    
+    if (this.actionSheetHeight >= this.state.deviceHeight - 1) {
       if (distanceFromTop < this.state.paddingTop) {
+        if (!this.props.drawUnderStatusBar) return;
         this.indicatorTranslateY.setValue(
           -this.state.paddingTop + (this.state.paddingTop - distanceFromTop)
         );
@@ -536,15 +529,22 @@ export default class ActionSheet extends Component {
       this._onKeyboardHide
     );
   }
-
+  timeout = null;
   _onDeviceLayout = async (_event) => {
+
     let event = { ..._event };
 
-    let safeMarginFromTop = 0;
+    if (this.timeout) {
+      clearTimeout(this.timeout);
+    }
+
+    this.timeout = setTimeout(async () => {
+      let safeMarginFromTop = 0;
+    let measuredPadding = Platform.OS === "ios" ? await this.measure() : StatusBar.currentHeight;
     if (!this.props.drawUnderStatusBar) {
       if (Platform.OS === "android" && !this.props.statusBarTranslucent) return;
-      safeMarginFromTop =
-        Platform.OS === "ios" ? await this.measure() : StatusBar.currentHeight;
+      safeMarginFromTop = measuredPadding;
+      this.indicatorTranslateY.setValue(-measuredPadding)
     }
 
     let height = event.nativeEvent.layout.height - safeMarginFromTop;
@@ -562,16 +562,16 @@ export default class ActionSheet extends Component {
       deviceHeight: height,
       deviceWidth: width,
       portrait: height > width,
-      paddingTop:
-        Platform.OS === "android"
-          ? StatusBar.currentHeight
-          : await this.measure(),
+      paddingTop:measuredPadding,
     });
+    },1)
+
+    
   };
 
   getInitialScrollPosition() {
     this._applyHeightLimiter();
-    let correction = this.state.deviceHeight * 0.1;
+    let correction = this.state.deviceHeight * 0.15;
     let scrollPosition = this.props.gestureEnabled
       ? this.actionSheetHeight * this.props.initialOffsetFromBottom +
         correction +
@@ -626,7 +626,7 @@ export default class ActionSheet extends Component {
           <SafeAreaView ref={this.safeAreaViewRef} style={styles.safearea}>
             <View />
           </SafeAreaView>
-
+          {this.props.premium}
           <FlatList
             bounces={false}
             keyboardShouldPersistTaps={keyboardShouldPersistTaps}
@@ -676,7 +676,7 @@ export default class ActionSheet extends Component {
                   onTouchStart={this._onTouchStart}
                   onTouchEnd={this._onTouchEnd}
                   style={{
-                    height: this.state.deviceHeight * 1.1,
+                    height: this.state.deviceHeight * 1.15,
                     width: "100%",
                     zIndex: 10,
                   }}
@@ -685,13 +685,15 @@ export default class ActionSheet extends Component {
                     onPress={this._onTouchBackdrop}
                     onLongPress={this._onTouchBackdrop}
                     style={{
-                      height: this.state.deviceHeight * 1.1,
+                      height: this.state.deviceHeight * 1.15,
                       width: "100%",
                     }}
                   />
                 </View>
 
                 <Animated.View
+
+onLayout={this._showModal}
                   style={[
                     styles.container,
                     {
@@ -712,9 +714,8 @@ export default class ActionSheet extends Component {
                   ]}
                 >
                   <Animated.View
-                    onLayout={this._showModal}
                     style={{
-                      maxHeight: "100%",
+                      maxHeight: this.state.deviceHeight,
                       transform: [
                         {
                           translateY: this.indicatorTranslateY,
